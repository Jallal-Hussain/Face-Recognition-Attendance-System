---
description: 
globs: 
alwaysApply: true
---
# Project: Face Recognition Attendance System

## 🧠 Project Overview

- **Objective**: Develop a face recognition-based attendance system that:
  - **Check-In**: Marks attendance when a student is recognized for the first time in a day.
  - **Check-Out**: Marks departure when the same student is recognized again on the same day.

- **Dataset**:
  - Collected 10 facial images per student.
  - Images are organized in a directory structure where each subdirectory is named after the student's unique identifier.

- **Model**:
  - Utilize the pre-trained model: `jayanta/vit-base-patch16-224-in21k-face-recognition`.
  - Fine-tune the model using the collected dataset to improve accuracy.

## 🛠️ Technical Stack

- **Programming Language**: Python 3.10+
- **Libraries & Frameworks**:
  - `transformers` for model loading and inference.
  - `torch` and `torchvision` for deep learning operations.
  - `gradio` for building the user interface.
  - `PIL` (Python Imaging Library) for image processing.
  
- **Deployment**:
  - Host the application using Hugging Face Spaces for easy accessibility.

## 🧑‍💻 Coding Guidelines

- **Code Structure**:
  - Modularize code into separate files:
    - `data_loader.py`: Handles data loading and preprocessing.
    - `model.py`: Contains model loading and inference functions.
    - `attendance.py`: Manages attendance logic and record-keeping.
    - `app.py`: Integrates all modules and runs the Gradio interface.

- **Naming Conventions**:
  - Use `snake_case` for function and variable names.
  - Use `PascalCase` for class names.

- **Documentation**:
  - Include docstrings for all functions and classes.
  - Provide comments for complex logic to enhance readability.

- **Error Handling**:
  - Implement try-except blocks where exceptions are likely.
  - Log errors with meaningful messages for easier debugging.

## 📋 Attendance Logic

- **Recognition Flow**:
  1. User uploads or captures an image.
  2. The system processes the image and predicts the student's identity.
  3. The system checks the attendance record:
     - If the student hasn't checked in today:
       - Record the current timestamp as check-in time.
     - If the student has already checked in but not checked out:
       - Record the current timestamp as check-out time.
     - If both check-in and check-out are already recorded:
       - Notify that attendance for the day is complete.

- **Data Storage**:
  - Maintain a CSV file to record daily attendance.

## 🧪 Testing & Validation

- **Test Cases**:
  - Validate model predictions with known images.
  - Test attendance logic for various scenarios:
    - First-time recognition.
    - Second-time recognition on the same day.
    - Multiple recognitions beyond check-in and check-out.

- **Performance Metrics**:
  - Monitor model accuracy, precision, and recall.
  - Ensure the system responds within acceptable time frames.

## 🚀 Deployment Guidelines

- **Gradio Interface**:
  - Design a user-friendly interface with clear instructions.
  - Display real-time feedback upon recognition.

- **Hugging Face Spaces**:
  - Ensure all dependencies are listed in `requirements.txt`.
  - Test the application thoroughly before deployment.

## 📁 File Structure

project_root/
├── data_loader.py
├── model.py
├── attendance.py
├── app.py
├── requirements.txt
├── dataset/
│ ├── student_1/
│ │ ├── img1.jpg
│ │ └── ...
│ └── student_n/
│ ├── img1.jpg
│ └── ...
├── attendance_records.json
└── README.md


## 📚 Additional Notes

- **Security**:
  - Ensure that uploaded images are not stored permanently unless necessary.
  - Protect attendance records from unauthorized access.

- **Scalability**:
  - Design the system to accommodate additional students with minimal changes.
  - Optimize model inference for faster processing times.

- **Maintenance**:
  - Regularly update the dataset with new images to improve model accuracy.
  - Monitor system logs for any anomalies or errors.



